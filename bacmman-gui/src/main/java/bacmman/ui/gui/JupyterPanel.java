package bacmman.ui.gui;

import bacmman.core.DockerGateway;
import bacmman.core.GithubGateway;
import bacmman.core.ProgressCallback;
import bacmman.ui.GUI;
import bacmman.ui.gui.configurationIO.GitCredentialPanel;
import bacmman.ui.gui.objects.CollapsiblePanel;
import bacmman.ui.logger.ProgressLogger;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import java.util.function.Consumer;
import java.util.function.Supplier;
import javax.swing.*;
import java.awt.*;

public class JupyterPanel {
    private JPanel mainPanel;
    private JPanel directoryPanel;
    private JPanel dockerPanel;
    private JPanel gitPanel;
    private JPanel controlPanel;
    private JSplitPane selectorAndViewerSplitPane;
    private JSplitPane selectorSplitPane;
    private JSplitPane viewerSplitPane;
    private JScrollPane localViewerJSP;
    private JScrollPane remoteViewerJSP;
    private JScrollPane localSelectorJSP;
    private JScrollPane remoteSelectorJSP;
    private WorkingDirPanel workingDirPanel;
    private DockerImageLauncher dockerImageLauncher;
    private GitCredentialPanel gitCredentialPanel;
    static String WD_ID = "jupyter_working_dir";
    private final DockerGateway dockerGateway;
    private final GithubGateway githubGateway;
    private final ProgressLogger bacmmanLogger;

    public JupyterPanel(DockerGateway dockerGateway, GithubGateway githubGateway, ProgressLogger bacmmanLogger) {
        this.dockerGateway = dockerGateway;
        this.githubGateway = githubGateway;
        this.bacmmanLogger = bacmmanLogger;
        String defWD;
        if (GUI.hasInstance()) {
            if (GUI.getDBConnection() != null) defWD = GUI.getDBConnection().getDatasetDir().toString();
            else defWD = GUI.getInstance().getWorkingDirectory();
        } else defWD = "";
        workingDirPanel = new WorkingDirPanel(null, defWD, WD_ID, this::updateWD, null, this::updateWD, null);
        Consumer<String> startContainer = null;
        dockerImageLauncher = new DockerImageLauncher(dockerGateway, workingDirPanel.getCurrentWorkingDirectory(), "/home/jovyan/work", true, startContainer, ProgressCallback.get(bacmmanLogger))
                .setImageRequirements("data_analysis", null, null, null);
        gitCredentialPanel = new GitCredentialPanel(githubGateway, this::updateGitCredentials, bacmmanLogger);
        $$$setupUI$$$();
    }

    protected void updateWD() {
        dockerImageLauncher.setWorkingDirectory(workingDirPanel.getCurrentWorkingDirectory());
    }

    protected void updateGitCredentials() {

    }

    public JPanel getMainPanel() {
        return mainPanel;
    }


    public boolean close() {
        return true;
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(directoryPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mainPanel.add(dockerPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mainPanel.add(gitPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        controlPanel = new JPanel();
        controlPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(controlPanel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        selectorAndViewerSplitPane = new JSplitPane();
        selectorAndViewerSplitPane.setDividerLocation(180);
        selectorAndViewerSplitPane.setOrientation(0);
        mainPanel.add(selectorAndViewerSplitPane, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(200, 200), null, 0, false));
        selectorSplitPane = new JSplitPane();
        selectorSplitPane.setDividerLocation(486);
        selectorAndViewerSplitPane.setLeftComponent(selectorSplitPane);
        localSelectorJSP = new JScrollPane();
        selectorSplitPane.setLeftComponent(localSelectorJSP);
        remoteSelectorJSP = new JScrollPane();
        selectorSplitPane.setRightComponent(remoteSelectorJSP);
        viewerSplitPane = new JSplitPane();
        viewerSplitPane.setDividerLocation(500);
        selectorAndViewerSplitPane.setRightComponent(viewerSplitPane);
        localViewerJSP = new JScrollPane();
        viewerSplitPane.setLeftComponent(localViewerJSP);
        remoteViewerJSP = new JScrollPane();
        viewerSplitPane.setRightComponent(remoteViewerJSP);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void createUIComponents() {
        directoryPanel = new CollapsiblePanel("Working Directory", workingDirPanel.getPanel());
        dockerPanel = new CollapsiblePanel("Run Notebook", dockerImageLauncher.getPanel());
        gitPanel = new CollapsiblePanel("Git Credentials", gitCredentialPanel.getPanel());
    }
}
