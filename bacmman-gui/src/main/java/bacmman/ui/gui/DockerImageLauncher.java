package bacmman.ui.gui;

import bacmman.configuration.parameters.DockerImageParameter;
import bacmman.configuration.parameters.GroupParameter;
import bacmman.configuration.parameters.IntegerParameter;
import bacmman.configuration.parameters.Parameter;
import bacmman.core.Core;
import bacmman.core.DockerGateway;
import bacmman.core.PythonGateway;
import bacmman.ui.GUI;
import bacmman.ui.gui.configuration.ConfigurationTreeGenerator;
import bacmman.utils.FileIO;
import bacmman.utils.JSONUtils;
import bacmman.utils.UnaryPair;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.json.simple.parser.JSONParser;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.function.Consumer;

public class DockerImageLauncher {
    private JButton start;
    private JButton stop;
    private JScrollPane configurationJSP;
    DockerImageParameter dockerImage;
    IntegerParameter port = new IntegerParameter("Port", 8888).setLowerBound(1);
    GroupParameter configuration;
    ConfigurationTreeGenerator configurationGen;
    private final DockerGateway gateway;
    private String workingDir;
    private String containerId = null;

    public DockerImageLauncher(DockerGateway gateway, String workingDir, boolean port, Consumer<String> startCb) {
        this.gateway = gateway;
        dockerImage = new DockerImageParameter("Docker Image");
        List<Parameter> params = new ArrayList<>();
        params.add(dockerImage);
        if (port) params.add(this.port);
        configuration = new GroupParameter("Configuration", params);
        setWorkingDirectory(workingDir);
        start.addActionListener(ae -> {
            List<UnaryPair<Integer>> portList = port ? Collections.singletonList(new UnaryPair<>(this.port.getIntValue(), this.port.getIntValue())): null;
            List<UnaryPair<String>> env = GUI.getPythonGateway() != null ? GUI.getPythonGateway().getEnv() : null;
            containerId = gateway.createContainer(dockerImage.getImageName(), 2, null, portList, env, new UnaryPair<>(workingDir, "/data"));
            if (startCb != null) startCb.accept(containerId);
        });
        stop.addActionListener(ae -> {
            try {
                gateway.stopContainer(containerId);
            } catch (Exception e) {

            } finally {
                containerId = null;
            }
        });
    }

    public DockerImageLauncher setWorkingDirectory(String dir) {
        this.workingDir=dir;
        if (configurationGen != null) configurationGen.unRegister();
        configurationGen = new ConfigurationTreeGenerator(null, configuration, v -> updateButtons(), (s, l) -> {
        }, s -> {
        }, null, null).rootVisible(false);
        configurationGen.expandAll();
        configurationJSP.setViewportView(configurationGen.getTree());
        loadConfig();
        return this;
    }

    protected String getConfigFile() {
        return Paths.get(workingDir, "dockerconfig.json").toString();
    }

    protected void loadConfig() {
        try {
            FileIO.TextFile configFile = new FileIO.TextFile(getConfigFile(), false, false);
            List<String> exConfigS = configFile.readLines();
            if (!exConfigS.isEmpty()) {
                try {
                    configuration.initFromJSONEntry(new JSONParser().parse(exConfigS.get(0)));
                    configurationGen.expandAll(1);
                } catch (Exception e) {
                }
            }
        } catch (IOException e) {
        }
    }

    public void saveConfig() {
        try {
            FileIO.TextFile configFile = new FileIO.TextFile(getConfigFile(), true, false);
            configFile.write(JSONUtils.toJSONString(configuration.toJSONEntry()), false);
        } catch (IOException e) {

        }
    }

    public void updateButtons() {
        start.setEnabled(containerId == null && configuration.isValid());
        stop.setEnabled(containerId != null);
    }

    public DockerImageLauncher setImageRequirements(String imageName, String versionPrefix, int[] minimalVersion, int[] maximalVersion) {
        dockerImage.setImageRequirement(imageName, versionPrefix, minimalVersion, maximalVersion);
        return this;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        configurationJSP = new JScrollPane();
        panel1.add(configurationJSP, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        start = new JButton();
        start.setText("Start");
        panel1.add(start, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stop = new JButton();
        stop.setText("Stop");
        panel1.add(stop, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }
}
