package bacmman.ui.gui.configurationIO;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import static bacmman.utils.Utils.SPECIAL_CHAR;

public class SaveGistForm {
    private JPanel namePanel;
    private JTextField name;
    private JTextField folder;
    private JPanel descriptionPanel;
    private JTextArea description;
    private JCheckBox publicJCB;
    private JButton cancel;
    private JButton OK;
    private JPanel panelMain;
    private JPanel buttonPanl;
    private JPanel folderPanel;
    boolean canceled = false;
    private static final Logger logger = LoggerFactory.getLogger(SaveGistForm.class);

    public SaveGistForm() {
        // unable special chars
        KeyAdapter ke = new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (SPECIAL_CHAR.matcher(String.valueOf(c)).find()) {
                    e.consume();  // ignore event
                }
            }
        };
        logger.debug("name field null: {}", name == null);
        name.addKeyListener(ke);
        folder.addKeyListener(ke);
    }

    public void display(JFrame parent, String title) {
        JDialog dia = new Dial(parent, title);
        dia.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        namePanel = new JPanel();
        namePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(namePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        namePanel.setBorder(BorderFactory.createTitledBorder("Configuration Name"));
        name = new JTextField();
        namePanel.add(name, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        folderPanel = new JPanel();
        folderPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(folderPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        folderPanel.setBorder(BorderFactory.createTitledBorder("Folder"));
        folder = new JTextField();
        folderPanel.add(folder, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        descriptionPanel = new JPanel();
        descriptionPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(descriptionPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        descriptionPanel.setBorder(BorderFactory.createTitledBorder("Description"));
        final JScrollPane scrollPane1 = new JScrollPane();
        descriptionPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        description = new JTextArea();
        scrollPane1.setViewportView(description);
        buttonPanl = new JPanel();
        buttonPanl.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        descriptionPanel.add(buttonPanl, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        publicJCB = new JCheckBox();
        publicJCB.setSelected(true);
        publicJCB.setText("public");
        buttonPanl.add(publicJCB, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancel = new JButton();
        cancel.setText("Cancel");
        buttonPanl.add(cancel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        OK = new JButton();
        OK.setText("OK");
        buttonPanl.add(OK, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

    private class Dial extends JDialog {
        Dial(JFrame parent, String title) {
            super(parent, title, true);
            getContentPane().add(panelMain);
            setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            pack();
            cancel.addActionListener(e -> {
                canceled = true;
                setVisible(false);
                dispose();
            });
            OK.addActionListener(e -> {
                canceled = false;
                setVisible(false);
                dispose();
            });
        }

    }


    public SaveGistForm setFolder(String folderName) {
        folder.setText(folderName);
        return this;
    }

    public SaveGistForm setName(String name) {
        this.name.setText(name);
        return this;
    }

    public SaveGistForm disableNameField() {
        this.name.setEnabled(false);
        return this;
    }

    public SaveGistForm disableFolderField() {
        this.folder.setEnabled(false);
        return this;
    }

    public SaveGistForm disableVisibleField() {
        this.publicJCB.setEnabled(false);
        return this;
    }

    public SaveGistForm setDescription(String description) {
        this.description.setText(description);
        return this;
    }

    public SaveGistForm setVisible(boolean visible) {
        this.publicJCB.setSelected(visible);
        return this;
    }

    public boolean visible() {
        return publicJCB.isSelected();
    }

    public String name() {
        return name.getText();
    }

    public String folder() {
        return folder.getText();
    }

    public String description() {
        return description.getText();
    }
}
