package bacmman.ui.gui.configurationIO;

import bacmman.core.GithubGateway;
import bacmman.github.gist.UserAuth;
import bacmman.ui.PropertyUtils;
import bacmman.ui.logger.ProgressLogger;
import bacmman.utils.Pair;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.util.function.Function;

public class GitCredentialPanel {
    private JTextField username;
    private JPasswordField password;
    private JButton generateToken;
    private JButton loadToken;
    private JPanel credentialPanel;
    private GithubGateway gateway;
    Runnable updateCredentialsCallback;
    ProgressLogger bacmmanLogger;

    public GitCredentialPanel(GithubGateway gateway, Runnable updateCredentialsCallback, ProgressLogger bacmmanLogger) {
        this.gateway = gateway;
        this.bacmmanLogger = bacmmanLogger;
        this.updateCredentialsCallback = updateCredentialsCallback;
        Function<Boolean, DocumentListener> dl = p -> new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                enableTokenButtons(p);
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                enableTokenButtons(p);
            }

            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                enableTokenButtons(p);
            }
        };
        username.getDocument().addDocumentListener(dl.apply(false));
        password.getDocument().addDocumentListener(dl.apply(true));
        generateToken.addActionListener(e -> {
            Pair<String, char[]> usernameAndPassword = GenerateGistToken.generateAndStoreToken(username.getText(), password.getPassword(), bacmmanLogger);
            if (usernameAndPassword != null) {
                gateway.setCredentials(usernameAndPassword.key, usernameAndPassword.value);
                this.username.setText(usernameAndPassword.key);
                this.password.setText(String.valueOf(usernameAndPassword.value));
            }
        });

        loadToken.addActionListener(e -> this.updateCredentialsCallback.run());
        // persistence of username account:
        PropertyUtils.setPersistent(username, "GITHUB_USERNAME", "jeanollion", true);
        if (gateway.getUsername() != null && !gateway.getUsername().isEmpty()) username.setText(gateway.getUsername());
        if (!username.getText().isEmpty() && password.getPassword().length == 0 && gateway.getPassword(username.getText()) != null)
            password.setText(String.valueOf(gateway.getPassword(username.getText())));
        username.addActionListener(e -> {
            if (!username.getText().isEmpty()) {
                if (gateway.getPassword(username.getText()) != null)
                    password.setText(String.valueOf(gateway.getPassword(username.getText())));
            }
            if (this.updateCredentialsCallback != null) this.updateCredentialsCallback.run();

        });
    }

    private void enableTokenButtons(boolean modifyingPassword) {
        String u = username.getText();
        char[] p = password.getPassword();
        boolean enableLoad = !u.isEmpty();
        loadToken.setEnabled(enableLoad);
        if (!modifyingPassword && !u.isEmpty() && p.length == 0 && gateway.getPassword(u) != null) {
            password.setText(String.valueOf(gateway.getPassword(u)));
            p = password.getPassword();
        }
        if (p.length == 0) loadToken.setText("Load Public Configurations");
        else loadToken.setText("Connect");
    }

    public String getUsername() {
        return username.getText();
    }

    public void persistUsername() {
        PropertyUtils.set("GITHUB_USERNAME", username.getText());
        PropertyUtils.addFirstStringToList("GITHUB_USERNAME", username.getText());
    }

    public UserAuth getAuth() {
        gateway.setCredentials(username.getText(), password.getPassword());
        return gateway.getAuthentication(false);
    }

    public JPanel getPanel() {
        return credentialPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        credentialPanel = new JPanel();
        credentialPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        credentialPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(null, "Username", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        username = new JTextField();
        username.setText("bacmman");
        username.setToolTipText("Enter the username of a github account containing configuration files. Right Click: display recent list");
        panel1.add(username, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        generateToken = new JButton();
        generateToken.setText("Generate Token");
        generateToken.setToolTipText("token will be stored encrypted using the password");
        credentialPanel.add(generateToken, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        credentialPanel.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(null, "Password", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        password = new JPasswordField();
        password.setToolTipText("<html>Enter a password in order to store a github token or to load a previously stored token. <br />If no password is set, only publicly available gists will be shown and saving or updating local configuration to the remote server won't be possible. <br />This password will be recorded in memory untill bacmann is closed, and will not be saved on the disk.</html>");
        panel2.add(password, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        loadToken = new JButton();
        loadToken.setText("Connect");
        loadToken.setToolTipText("load a previously stored token and connect to github account");
        credentialPanel.add(loadToken, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return credentialPanel;
    }

}
