package bacmman.ui.gui.configurationIO;

import bacmman.configuration.parameters.FileChooser;
import bacmman.core.DefaultWorker;
import bacmman.core.GithubGateway;
import bacmman.core.ProgressCallback;
import bacmman.github.gist.*;
import bacmman.ui.GUI;
import bacmman.ui.gui.configuration.ConfigurationTreeGenerator;
import bacmman.ui.logger.ProgressLogger;
import bacmman.utils.Pair;
import bacmman.utils.Utils;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.function.Consumer;

import static bacmman.github.gist.GistDLModel.BASE_URL;
import static bacmman.github.gist.JSONQuery.GIST_BASE_URL;
import static bacmman.utils.Utils.SPECIAL_CHAR;

public class SaveDLModelGist {
    public static final Logger logger = LoggerFactory.getLogger(SaveDLModelGist.class);
    private JPanel namePanel;
    private JTextField name;
    private JPanel folderPanel;
    private JTextField folder;
    private JPanel urlPanel;
    private JTextField url;
    private JPanel descPanel;
    private JTextArea description;
    private JCheckBox publicJCB;
    private JButton cancel;
    private JButton OK;
    private JPanel panelMain;
    private JPanel metadataPanel;
    private JScrollPane metadataScrollPane;
    private JPanel modelPanel;
    private JButton uploadButton;
    boolean canceled = false;
    private DLModelMetadata metadata = new DLModelMetadata();
    private ConfigurationTreeGenerator metadataTG;
    private UserAuth auth;
    private String defaultDirectory;
    private ProgressLogger pcb;
    Pair<String, DefaultWorker> uploader;
    GithubGateway gateway;
    public SaveDLModelGist(GithubGateway gateway) {
        KeyAdapter ke = new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (SPECIAL_CHAR.matcher(String.valueOf(c)).find()) {
                    e.consume();  // ignore event
                }
            }
        };
        name.addKeyListener(ke);
        folder.addKeyListener(ke);
        this.gateway = gateway;
    }


    public void display(JFrame parent, String title) {
        JDialog dia = new Dial(parent, title);
        dia.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        namePanel = new JPanel();
        namePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(namePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        namePanel.setBorder(BorderFactory.createTitledBorder(null, "Name", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        name = new JTextField();
        namePanel.add(name, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        folderPanel = new JPanel();
        folderPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(folderPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        folderPanel.setBorder(BorderFactory.createTitledBorder(null, "Folder", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        folder = new JTextField();
        folderPanel.add(folder, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        descPanel = new JPanel();
        descPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(descPanel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        descPanel.setBorder(BorderFactory.createTitledBorder(null, "Description", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        publicJCB = new JCheckBox();
        publicJCB.setText("public");
        descPanel.add(publicJCB, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancel = new JButton();
        cancel.setText("Cancel");
        descPanel.add(cancel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        OK = new JButton();
        OK.setText("OK");
        descPanel.add(OK, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        descPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        description = new JTextArea();
        scrollPane1.setViewportView(description);
        metadataPanel = new JPanel();
        metadataPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(metadataPanel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, -1), null, null, 0, false));
        metadataPanel.setBorder(BorderFactory.createTitledBorder(null, "Metadata", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        metadataScrollPane = new JScrollPane();
        metadataPanel.add(metadataScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(600, 200), null, null, 0, false));
        modelPanel = new JPanel();
        modelPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(modelPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        modelPanel.setBorder(BorderFactory.createTitledBorder(null, "Model File", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        urlPanel = new JPanel();
        urlPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        modelPanel.add(urlPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        urlPanel.setBorder(BorderFactory.createTitledBorder(null, "URL", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        url = new JTextField();
        urlPanel.add(url, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        uploadButton = new JButton();
        uploadButton.setEnabled(false);
        uploadButton.setText("Upload From Disk");
        uploadButton.setToolTipText("Upload the selected file as a github gist, on the connected github account.  If the selected file is a directory it will be zipped first.");
        modelPanel.add(uploadButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

    private class Dial extends JDialog {
        Dial(JFrame parent, String title) {
            super(parent, title, true);
            metadataTG = new ConfigurationTreeGenerator(null, metadata, v -> {
            }, (s, l) -> {
            }, s -> {
            }, null, null);
            //metadataTG.getTree().setShowsRootHandles(false);
            metadataTG.getTree().setRootVisible(false);
            metadataScrollPane.setViewportView(metadataTG.getTree());
            getContentPane().add(panelMain);
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            pack();
            cancel.addActionListener(e -> {
                if (allowCloseCheckUploading()) {
                    canceled = true;
                    setVisible(false);
                    ToolTipManager.sharedInstance().unregisterComponent(metadataTG.getTree());
                    dispose();
                }
            });
            OK.addActionListener(e -> {
                if (allowCloseCheckUploading()) {
                    canceled = false;
                    setVisible(false);
                    ToolTipManager.sharedInstance().unregisterComponent(metadataTG.getTree());
                    dispose();
                }
            });
            Consumer<UserAuth> uploadFile = a -> {
                File file = Utils.chooseFile("Select Model Folder/File to upload", defaultDirectory, FileChooser.FileChooserOption.FILE_OR_DIRECTORY, parent);
                if (file != null) {
                    try {
                        uploader = LargeFileGist.storeFile(file, false, description(), "dl_model", a, true, id -> {
                            setURL(GIST_BASE_URL + id);
                            GUI.log("Model stored @ id = " + id);
                            uploader = null;
                        }, pcb);
                    } catch (IOException ex) {
                        if (pcb != null) pcb.setMessage("Could not store file:" + ex.getMessage());
                        logger.error("Error storing model file", ex);
                    }
                }
            };

            uploadButton.addActionListener(e -> {
                uploadFile.accept(auth);
            });
            uploadButton.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent evt) {
                    if (SwingUtilities.isRightMouseButton(evt)) {
                        JPopupMenu menu = new JPopupMenu();
                        Action upOther = new AbstractAction("Upload Model to another account") {
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                Pair<String, char[]> cred = PromptGithubCredentials.promptCredentials(gateway, false);
                                if (cred != null) {
                                    try {
                                        TokenAuth auth2 = new TokenAuth(cred.key, cred.value);
                                        uploadFile.accept(auth2);
                                    } catch (IllegalArgumentException ex) {
                                        if (pcb != null)
                                            pcb.setMessage("Could not load token for username: " + cred.key + " Wrong password ? Or no token was stored yet?");
                                    }
                                }
                            }
                        };
                        menu.add(upOther);
                        menu.show(uploadButton, evt.getX(), evt.getY());
                    }
                }
            });
            DocumentListener dl = new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent documentEvent) {
                    setEnableButton();
                }

                @Override
                public void removeUpdate(DocumentEvent documentEvent) {
                    setEnableButton();
                }

                @Override
                public void changedUpdate(DocumentEvent documentEvent) {
                    setEnableButton();
                }
            };
            name.getDocument().addDocumentListener(dl);
            folder.getDocument().addDocumentListener(dl);
            url.getDocument().addDocumentListener(dl);
            setEnableButton();
        }

        private boolean allowCloseCheckUploading() {
            if (uploader != null && uploader.value != null) {
                String currentURL = url.getText();
                boolean cancel = Utils.promptBoolean("Uploading in process... Click Yes to cancel it", this);
                if (cancel) {
                    if (uploader != null) { // if process finishes before answer -> uploader is set to null
                        String id = uploader.key;
                        uploader.value.cancel(true);
                        url.setText(currentURL); // callback may have modified url
                        if (id != null) {
                            boolean deleted = JSONQuery.delete(BASE_URL + "/gists/" + id, auth);
                            logger.debug("aborted gist id: {} deleted ? {}", id, deleted);
                        }
                        uploader = null;
                    }
                    return true;
                } else return false;
            } else return true;
        }
    }

    public void setEnableButton() {
        boolean enabled = Utils.isValid(name.getText(), true)
                && Utils.isValid(folder.getText(), false) && !folder.getText().contains("_")
                && url.getText().length() > 0;
        OK.setEnabled(enabled);
    }

    public SaveDLModelGist setAuthAndDefaultDirectory(UserAuth auth, String defaultDir, ProgressLogger pcb) {
        this.auth = auth;
        this.defaultDirectory = defaultDir;
        this.pcb = pcb;
        if (auth != null && !(auth instanceof NoAuth)) uploadButton.setEnabled(true);
        return this;
    }

    public SaveDLModelGist setFolder(String folderName) {
        folder.setText(folderName);
        return this;
    }

    public SaveDLModelGist setName(String name) {
        this.name.setText(name);
        return this;
    }

    public SaveDLModelGist disableNameField() {
        this.name.setEnabled(false);
        return this;
    }

    public SaveDLModelGist disableFolderField() {
        this.folder.setEnabled(false);
        return this;
    }

    public SaveDLModelGist disableVisibleField() {
        this.publicJCB.setEnabled(false);
        return this;
    }

    public SaveDLModelGist setDescription(String description) {
        this.description.setText(description);
        return this;
    }

    public SaveDLModelGist setVisible(boolean visible) {
        this.publicJCB.setSelected(visible);
        return this;
    }

    public SaveDLModelGist setURL(String url) {
        this.url.setText(url);
        return this;
    }

    public SaveDLModelGist setMetadata(DLModelMetadata metadata) {
        this.metadata.setContentFrom(metadata);
        if (metadataTG != null) metadataTG.getTree().updateUI();
        return this;
    }

    public boolean visible() {
        return publicJCB.isSelected();
    }

    public String name() {
        return name.getText();
    }

    public String folder() {
        return folder.getText();
    }

    public String description() {
        return description.getText();
    }

    public String url() {
        return url.getText();
    }

    public DLModelMetadata metadata() {
        return metadata;
    }
}
