package bacmman.ui.gui.configurationIO;

import bacmman.configuration.parameters.*;
import bacmman.core.Task;
import bacmman.data_structure.dao.MasterDAO;
import bacmman.data_structure.input_image.InputImages;
import bacmman.image.BoundingBox;
import bacmman.image.SimpleBoundingBox;
import bacmman.ui.GUI;
import bacmman.ui.gui.configuration.ConfigurationTreeGenerator;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class ExtractRawDataset extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JList channelSelector;
    private JScrollPane parameterJSP;
    private final DefaultListModel<String> channelModel;
    private final FileChooser outputFile;
    private final GroupParameter container;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setToolTipText("select channel images that will be extracted");
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(null, "Channel Images", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        channelSelector = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        channelSelector.setModel(defaultListModel1);
        scrollPane1.setViewportView(channelSelector);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        parameterJSP = new JScrollPane();
        panel4.add(parameterJSP, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        parameterJSP.setBorder(BorderFactory.createTitledBorder(null, "Extraction Parameters", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    enum FRAME_CHOICE_MODE {ALL, RANDOM, FLUO_SIGNAL}

    private final EnumChoiceParameter<FRAME_CHOICE_MODE> frameChoiceMode;
    private final ConditionalParameter<FRAME_CHOICE_MODE> frameChoiceCond;
    private final ChannelImageParameter frameChoiceChannelImage;
    private final BoundedNumberParameter nFrames;
    private final GroupParameter bounds;
    private final BoundedNumberParameter xMin, xSize, yMin, ySize, zMin, zSize;
    EnumChoiceParameter<Task.ExtractZAxis> extractZ = new EnumChoiceParameter<>("Extract Z", Task.ExtractZAxis.values(), Task.ExtractZAxis.IMAGE3D);
    BoundedNumberParameter extractZPlaneIdx = new BoundedNumberParameter("Plane Index", 0, 0, 0, null);
    ConditionalParameter<Task.ExtractZAxis> extractZCond = new ConditionalParameter<>(extractZ)
            .setActionParameters(Task.ExtractZAxis.SINGLE_PLANE, extractZPlaneIdx)
            .setHint("Choose how to handle Z-axis: <ul><li>Image3D: treated as 3rd space dimension.</li><li>CHANNEL: Z axis will be considered as channel axis.<em>Channel Index</em> parameter will be used</li><li>SINGLE_PLANE: a single plane is extracted, defined in <em>Plane Index</em> parameter</li><li>MIDDLE_PLANE: the middle plane is extracted</li><li>BATCH: tensor are treated as 2D images </li></ul>");
    private final ConfigurationTreeGenerator outputConfigTree;
    private final MasterDAO mDAO;
    private final List<String> selectedPositions;
    private Task resultingTask;

    public ExtractRawDataset(MasterDAO mDAO, List<String> selectedPositions) {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);
        this.mDAO = mDAO;
        this.selectedPositions = selectedPositions;
        channelModel = new DefaultListModel<>();
        this.channelSelector.setModel(channelModel);
        for (String channel : mDAO.getExperiment().getChannelImagesAsString(false)) channelModel.addElement(channel);
        outputFile = new FileChooser("Output File", FileChooser.FileChooserOption.FILE_ONLY, false)
                .setRelativePath(false)
                .mustExist(false)
                .setHint("Set file where dataset will be extracted. If file exists and is of same format, data will be appended to the file");
        nFrames = new BoundedNumberParameter("Number of frame per position", 0, 10, 1, null);
        frameChoiceMode = new EnumChoiceParameter<>("Frame Choice", FRAME_CHOICE_MODE.values(), FRAME_CHOICE_MODE.RANDOM);
        frameChoiceCond = new ConditionalParameter<>(frameChoiceMode);
        frameChoiceChannelImage = new ChannelImageParameter("Channel Image", 0);
        frameChoiceChannelImage.setIncludeDuplicatedChannels(false);
        frameChoiceCond.setActionParameters(FRAME_CHOICE_MODE.FLUO_SIGNAL, frameChoiceChannelImage, nFrames);
        frameChoiceCond.setActionParameters(FRAME_CHOICE_MODE.RANDOM, nFrames);
        xMin = new BoundedNumberParameter("X start", 0, 0, 0, null);
        xSize = new BoundedNumberParameter("X size", 0, 0, 0, null);
        yMin = new BoundedNumberParameter("Y start", 0, 0, 0, null);
        ySize = new BoundedNumberParameter("Y size", 0, 0, 0, null);
        zMin = new BoundedNumberParameter("Z start", 0, 0, 0, null);
        zSize = new BoundedNumberParameter("Z size", 0, 0, 0, null);
        bounds = new GroupParameter("Crop Image", xMin, xSize, yMin, ySize, zMin, zSize);
        container = new GroupParameter("", outputFile, frameChoiceCond, bounds, extractZCond);
        container.setParent(mDAO.getExperiment());
        outputConfigTree = new ConfigurationTreeGenerator(mDAO.getExperiment(), container, v -> {
        }, (s, l) -> {
        }, s -> {
        }, null, null).showRootHandle(false);
        this.parameterJSP.setViewportView(outputConfigTree.getTree());

        channelSelector.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        channelSelector.addListSelectionListener(e -> setEnableOk());
        frameChoiceChannelImage.addListener(e -> setEnableOk());
        outputFile.addListener(t -> setEnableOk());
        buttonOK.addActionListener(e -> onOK());
        buttonCancel.addActionListener(e -> onCancel());
        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });
        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        setEnableOk();
    }

    private void setEnableOk() {
        if (channelSelector.getSelectedValuesList().isEmpty()) {
            buttonOK.setEnabled(false);
            return;
        }
        if (!container.isValid()) {
            buttonOK.setEnabled(false);
            return;
        }
        buttonOK.setEnabled(true);
    }

    private void setDefaultValues(String outputFile, int[] channels, BoundingBox bounds, FRAME_CHOICE_MODE mode, int nFrames, Task.ExtractZAxis zAXis, int extractZPlaneIdx) {
        if (outputFile != null) this.outputFile.setSelectedFilePath(outputFile);
        if (channels != null) channelSelector.setSelectedIndices(channels);
        if (bounds != null) {
            xMin.setValue(bounds.xMin());
            xSize.setValue(bounds.sizeX());
            yMin.setValue(bounds.yMin());
            ySize.setValue(bounds.sizeY());
            zMin.setValue(bounds.zMin());
            zSize.setValue(bounds.sizeZ());
        }
        this.frameChoiceMode.setSelectedEnum(mode);
        this.nFrames.setValue(nFrames);
        this.extractZ.setSelectedEnum(zAXis);
        this.extractZPlaneIdx.setValue(extractZPlaneIdx);
        this.frameChoiceChannelImage.setSelectedClassIdx(-1);
        outputConfigTree.getTree().updateUI();
    }

    private void close() {
        if (outputConfigTree != null) outputConfigTree.unRegister();
        dispose();
    }

    private void onOK() {
        resultingTask = new Task(mDAO.getDBName(), mDAO.getDatasetDir().toFile().getAbsolutePath());
        int[] channels = channelSelector.getSelectedIndices();
        SimpleBoundingBox bounds = new SimpleBoundingBox(xMin.getValue().intValue(), xMin.getValue().intValue() + xSize.getValue().intValue() - 1, yMin.getValue().intValue(), yMin.getValue().intValue() + ySize.getValue().intValue() - 1, zMin.getValue().intValue(), zMin.getValue().intValue() + zSize.getValue().intValue() - 1);
        Map<String, List<Integer>> positionMapFrames = selectedPositions.stream().collect(Collectors.toMap(p -> p, p -> getFrames(mDAO.getExperiment().getPosition(p).getInputImages(), frameChoiceChannelImage.getSelectedIndex())));
        resultingTask.setExtractRawDS(outputFile.getFirstSelectedFilePath(), channels, bounds, extractZ.getSelectedEnum(), extractZPlaneIdx.getValue().intValue(), positionMapFrames, GUI.hasInstance() ? GUI.getInstance().getExtractedDSCompressionFactor() : 4);
        close();
    }

    private List<Integer> getFrames(InputImages images, int channel) {
        int nFrames = this.nFrames.getValue().intValue();
        switch (this.frameChoiceMode.getSelectedEnum()) {
            default:
            case RANDOM:
                List<Integer> choice = IntStream.range(0, images.getFrameNumber()).mapToObj(i -> i).collect(Collectors.toList());
                Collections.shuffle(choice);
                return choice.stream().limit(nFrames).collect(Collectors.toList());
            case FLUO_SIGNAL:
                return InputImages.chooseNImagesWithSignal(images, channel, nFrames);
            case ALL:
                return IntStream.range(0, images.getFrameNumber()).boxed().collect(Collectors.toList());
        }
    }

    public static Task promptExtractDatasetTask(MasterDAO mDAO, Task selectedTask, List<String> selectedPositions) {
        ExtractRawDataset dialog = new ExtractRawDataset(mDAO, selectedPositions);
        dialog.setTitle("Configure Dataset extraction");
        if (selectedTask != null) {
            int nFrames = 0;
            if (selectedTask.getExtractRawDSFrames() != null && !selectedTask.getExtractRawDSFrames().isEmpty())
                nFrames = selectedTask.getExtractRawDSFrames().values().iterator().next().size();
            dialog.setDefaultValues(selectedTask.getExtractRawDSFile(), selectedTask.getExtractRawDSChannels(), selectedTask.getExtractRawDSBounds(), null, nFrames, selectedTask.getExtractRawZAxis(), selectedTask.getExtractRawZAxisPlaneIdx());
        }
        dialog.pack();
        dialog.setVisible(true);
        return dialog.resultingTask;
    }

    private void onCancel() {
        close();
    }

}
