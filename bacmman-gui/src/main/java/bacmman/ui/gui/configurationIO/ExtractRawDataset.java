package bacmman.ui.gui.configurationIO;

import bacmman.configuration.parameters.*;
import bacmman.core.Task;
import bacmman.data_structure.dao.MasterDAO;
import bacmman.image.BoundingBox;
import bacmman.image.SimpleBoundingBox;
import bacmman.ui.GUI;
import bacmman.ui.gui.configuration.ConfigurationTreeGenerator;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

public class ExtractRawDataset extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JList channelSelector;
    private JScrollPane parameterJSP;
    private final DefaultListModel<String> channelModel;
    private final ExtractRawDatasetParameter extractParameter;
    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setToolTipText("select channel images that will be extracted");
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(null, "Channel Images", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        channelSelector = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        channelSelector.setModel(defaultListModel1);
        scrollPane1.setViewportView(channelSelector);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        parameterJSP = new JScrollPane();
        panel4.add(parameterJSP, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        parameterJSP.setBorder(BorderFactory.createTitledBorder(null, "Extraction Parameters", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private final ConfigurationTreeGenerator outputConfigTree;
    private final MasterDAO mDAO;
    private final List<String> selectedPositions;
    private Task resultingTask;

    public ExtractRawDataset(MasterDAO mDAO, List<String> selectedPositions) {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);
        this.mDAO = mDAO;
        this.selectedPositions = selectedPositions;
        channelModel = new DefaultListModel<>();
        this.channelSelector.setModel(channelModel);
        for (String channel : mDAO.getExperiment().getChannelImagesAsString(false)) channelModel.addElement(channel);
        extractParameter = new ExtractRawDatasetParameter("", true);
        extractParameter.setParent(mDAO.getExperiment());
        outputConfigTree = new ConfigurationTreeGenerator(mDAO.getExperiment(), extractParameter, v -> {
        }, (s, l) -> {
        }, s -> {
        }, null, null).showRootHandle(false);
        this.parameterJSP.setViewportView(outputConfigTree.getTree());

        channelSelector.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        channelSelector.addListSelectionListener(e -> setEnableOk());
        extractParameter.frameChoiceChannelImage.addListener(e -> setEnableOk());
        extractParameter.outputFile.addListener(t -> setEnableOk());
        buttonOK.addActionListener(e -> onOK());
        buttonCancel.addActionListener(e -> onCancel());
        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });
        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        setEnableOk();
    }

    private void setEnableOk() {
        if (channelSelector.getSelectedValuesList().isEmpty()) {
            buttonOK.setEnabled(false);
            return;
        }
        if (!extractParameter.isValid()) {
            buttonOK.setEnabled(false);
            return;
        }
        buttonOK.setEnabled(true);
    }

    private void close() {
        if (outputConfigTree != null) outputConfigTree.unRegister();
        dispose();
    }

    private void onOK() {
        resultingTask = new Task(mDAO.getDBName(), mDAO.getDatasetDir().toFile().getAbsolutePath());
        int[] channels = channelSelector.getSelectedIndices();
        SimpleBoundingBox bounds = extractParameter.getBounds();
        Map<String, List<Integer>> positionMapFrames = selectedPositions.stream().collect(Collectors.toMap(p -> p, p -> extractParameter.getFrames(mDAO.getExperiment().getPosition(p).getInputImages(), extractParameter.frameChoiceChannelImage.getSelectedIndex())));
        resultingTask.setExtractRawDS(extractParameter.outputFile.getFirstSelectedFilePath(), channels, bounds, extractParameter.extractZ.getExtractZDim(), extractParameter.extractZ.getPlaneIdx(), positionMapFrames, GUI.hasInstance() ? GUI.getInstance().getExtractedDSCompressionFactor() : 4);
        close();
    }

    public static Task promptExtractDatasetTask(MasterDAO mDAO, Task selectedTask, List<String> selectedPositions) {
        ExtractRawDataset dialog = new ExtractRawDataset(mDAO, selectedPositions);
        dialog.setTitle("Configure Dataset extraction");
        if (selectedTask != null) {
            int nFrames = 0;
            if (selectedTask.getExtractRawDSFrames() != null && !selectedTask.getExtractRawDSFrames().isEmpty())
                nFrames = selectedTask.getExtractRawDSFrames().values().iterator().next().size();
            dialog.setDefaultValues(selectedTask.getExtractRawDSFile(), selectedTask.getExtractRawDSChannels(), selectedTask.getExtractRawDSBounds(), null, nFrames, selectedTask.getExtractRawZAxis(), selectedTask.getExtractRawZAxisPlaneIdx());
        }
        dialog.pack();
        dialog.setVisible(true);
        return dialog.resultingTask;
    }

    public void setDefaultValues(String outputFile, int[] channels, BoundingBox bounds, ExtractRawDatasetParameter.FRAME_CHOICE_MODE mode, int nFrames, Task.ExtractZAxis zAXis, int extractZPlaneIdx) {
        if (channels != null) channelSelector.setSelectedIndices(channels);
        extractParameter.setDefaultValues(outputFile, channels, bounds, mode, nFrames, zAXis, extractZPlaneIdx);
        outputConfigTree.getTree().updateUI();
    }

    private void onCancel() {
        close();
    }

}
