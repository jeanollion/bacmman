package bacmman.ui.gui;

import bacmman.core.OmeroGateway;
import bacmman.ui.PropertyUtils;
import bacmman.utils.SymetricalPair;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.*;
import java.util.Map;

public class PromptOmeroConnectionInformation extends JDialog {
    private JPanel contentPane;
    private JButton connect;
    private JTextField hostname;
    private JTextField username;
    private JPasswordField password;
    private JPanel serverPanel;
    private JPanel connectionPanel;
    private JButton cancelButton;
    private JButton storePasswordButton;
    private final Map<SymetricalPair<String>, char[]> savedPassword;
    SetCredentials callback;
    Frame owner;

    public PromptOmeroConnectionInformation(Map<SymetricalPair<String>, char[]> savedPassword, SetCredentials callback, Frame owner) {
        super(owner, true);
        this.owner = owner;
        this.savedPassword = savedPassword;
        this.callback = callback;
        setContentPane(contentPane);
        setTitle("Omero Server Connection");
        setModal(true);
        getRootPane().setDefaultButton(connect);
        username.addActionListener(e -> {
            if (password.getPassword().length == 0 && savedPassword != null && savedPassword.containsKey(getPWKey()))
                password.setText(String.valueOf(savedPassword.get(getPWKey())));
            updateOKButton();
        });
        PropertyUtils.setPersistent(username, "OMERO_USERNAME", "", true);
        PropertyUtils.setPersistent(hostname, "OMERO_HOSTNAME", "localhost", true);

        updateOKButton();
        DocumentListener dl = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                updateOKButton();
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                updateOKButton();
            }

            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                updateOKButton();
            }

        };
        username.getDocument().addDocumentListener(dl);
        password.getDocument().addDocumentListener(dl);
        hostname.getDocument().addDocumentListener(dl);

        cancelButton.addActionListener(e -> onCancel());
        connect.addActionListener(e -> onOK());

        storePasswordButton.addActionListener(al -> {
            StoreOmeroPassword.storeOmeroPassword(hostname.getText(), username.getText(), savedPassword, su -> {
                hostname.setText(su.key);
                username.setText(su.value);
                if (savedPassword.containsKey(getPWKey()))
                    password.setText(String.valueOf(savedPassword.get(getPWKey())));
            }, owner);

        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private SymetricalPair<String> getPWKey() {
        return new SymetricalPair<>(hostname.getText(), username.getText());
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        connectionPanel = new JPanel();
        connectionPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(connectionPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        serverPanel = new JPanel();
        serverPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        serverPanel.setToolTipText("enter serverur adress and optionally port : <hostname>:<port>.  Right click to display recent user list");
        connectionPanel.add(serverPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        serverPanel.setBorder(BorderFactory.createTitledBorder(null, "hostname", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        hostname = new JTextField();
        hostname.setText("localhost");
        serverPanel.add(hostname, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setToolTipText("enter username. Right click for recent user list");
        connectionPanel.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(null, "Username", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        username = new JTextField();
        panel1.add(username, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        connectionPanel.add(panel2, new GridConstraints(1, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(null, "Password", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        password = new JPasswordField();
        panel2.add(password, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        connectionPanel.add(panel3, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel3.add(cancelButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        connect = new JButton();
        connect.setText("Connect");
        panel3.add(connect, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        storePasswordButton = new JButton();
        storePasswordButton.setText("Store Password");
        storePasswordButton.setToolTipText("open a widow to store the encrypted remote omero password. This way only the encryption password can be used in this window to connect to the omero gateway. one encrypted password is bound to a given useranme and a given hostname");
        panel3.add(storePasswordButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    @FunctionalInterface
    public interface SetCredentials {
        public void set(String hostname, String username, String password);
    }

    private void updateOKButton() {
        boolean canConnect = this.username.getText().length() > 0 && password.getPassword().length > 0 && hostname.getText().length() > 0;
        connect.setEnabled(canConnect);

    }

    private void onOK() {
        // add your code here
        saveCurrentConnectionParameters();
        callback.set(hostname.getText(), username.getText(), String.copyValueOf(password.getPassword()));
        dispose();
    }

    private void saveCurrentConnectionParameters() {
        PropertyUtils.set("OMERO_USERNAME", username.getText());
        PropertyUtils.addFirstStringToList("OMERO_USERNAME", username.getText());
        PropertyUtils.set("OMERO_HOSTNAME", hostname.getText());
        PropertyUtils.addFirstStringToList("OMERO_HOSTNAME", hostname.getText());
        if (savedPassword != null) savedPassword.put(getPWKey(), password.getPassword());
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    public static void promptCredentials(Map<SymetricalPair<String>, char[]> savedPasswords, SetCredentials callback, Object owner) {
        PromptOmeroConnectionInformation dialog = new PromptOmeroConnectionInformation(savedPasswords, callback, owner instanceof Frame ? (Frame) owner : null);
        dialog.pack();
        dialog.setVisible(true);
    }
}
